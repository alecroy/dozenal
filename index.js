// Generated by CoffeeScript 1.9.3
(function() {
  var fractionToDigits, integerToDigits, numerals, powers, sayDigits, sayDigitsReversed, sayFractions, words;

  exports.print = function(number, format) {
    var digits, fFixed, fWidth, fraction, fractions, iFixed, iWidth, integer, ref, ref1, sign, table, upperLower;
    if (format == null) {
      format = '';
    }
    sign = -1 === Math.sign(number) ? '-' : '';
    number = Math.abs(number);
    integer = Math.floor(number);
    fraction = number - integer;
    ref = /(\d?)([dD]?).?(\d?)/.exec(format), format = ref[0], iWidth = ref[1], upperLower = ref[2], fWidth = ref[3];
    ref1 = [iWidth !== '', fWidth !== ''], iFixed = ref1[0], fFixed = ref1[1];
    iWidth = Number(iWidth || 0);
    fWidth = Number(fWidth || 0);
    table = numerals[upperLower || 'D'];
    digits = integerToDigits(integer, table, iFixed, iWidth);
    fractions = fractionToDigits(fraction, table, fFixed, fWidth);
    if (fractions.length === 0) {
      return "" + sign + (digits.join(''));
    } else {
      return "" + sign + (digits.join('')) + "." + (fractions.join(''));
    }
  };

  integerToDigits = function(integer, numerals, fixed, width) {
    var lsb, output;
    output = [];
    if (integer === 0 && (!fixed || width > 0)) {
      width--;
      output.unshift('0');
    }
    while (integer >= 1 && (!fixed || width > 0)) {
      width--;
      lsb = integer % 12;
      output.unshift(numerals[lsb]);
      integer -= lsb;
      integer /= 12;
    }
    while (fixed && width > 0) {
      output.unshift(' ');
      width--;
    }
    return output;
  };

  fractionToDigits = function(fraction, numerals, fixed, width) {
    var msb, output;
    output = [];
    while (fraction > 0 && (!fixed || width > 0)) {
      width--;
      fraction *= 12;
      msb = Math.floor(fraction);
      output.push(numerals[msb]);
      fraction -= msb;
    }
    while (fixed && width > 0) {
      output.push(' ');
      width--;
    }
    return output;
  };

  exports.say = function(number, format) {
    var digits, dozenal, fractions, minus, output, ref;
    if (format == null) {
      format = '';
    }
    output = [];
    minus = Math.sign(number) === -1 ? 'minus ' : '';
    number = Math.abs(number);
    dozenal = exports.print(number, format);
    ref = dozenal.split('.'), digits = ref[0], fractions = ref[1];
    digits = digits ? digits.split('').reverse() : [];
    fractions = fractions ? fractions.split('') : [];
    output = sayDigits(digits, output);
    output = sayFractions(fractions, output);
    return "" + minus + (output.join(' '));
  };

  sayFractions = function(fractions, output) {
    if (output == null) {
      output = [];
    }
    if ((fractions != null ? fractions.length : void 0) > 0) {
      output.push('point');
      while (fractions.length > 0) {
        output.push(words[fractions.shift()]);
      }
    }
    return output;
  };

  sayDigits = function(digits, output) {
    if (output == null) {
      output = [];
    }
    switch (digits.length) {
      case 1:
        if (digits[0] === '0') {
          output.push('zero');
        } else {
          output.push(words[digits[0]]);
        }
        return output;
      default:
        return sayDigitsReversed(digits, 0, output).filter(function(str) {
          return str !== '';
        }).reverse();
    }
  };

  sayDigitsReversed = function(digits, power, output) {
    var group;
    if (power == null) {
      power = 0;
    }
    if (output == null) {
      output = [];
    }
    if (digits.length === 0) {
      return output;
    }
    group = digits.splice(0, 3);
    if (group.every(function(d) {
      return d === '0';
    })) {
      return sayDigitsReversed(digits, power + 3, output);
    }
    output.push(powers[power]);
    output.push((function() {
      switch (group[0]) {
        case void 0:
          return '';
        case '0':
          return '';
        default:
          if (group[0] === '1' && power > 0 && !group[1] && !group[2]) {
            return '';
          } else {
            return words[group[0]];
          }
      }
    })());
    output.push((function() {
      switch (group[1]) {
        case void 0:
          return '';
        case '0':
          return '';
        case '1':
          return "" + powers[power + 1];
        default:
          return words[group[1]] + "-" + powers[power + 1];
      }
    })());
    output.push((function() {
      switch (group[2]) {
        case void 0:
          return '';
        case '0':
          return '';
        case '1':
          return "" + powers[power + 2];
        default:
          return words[group[2]] + "-" + powers[power + 2];
      }
    })());
    return sayDigitsReversed(digits, power + 3, output);
  };

  numerals = {
    'D': ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'E'],
    'd': ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 't', 'e']
  };

  words = {
    '1': 'one',
    '2': 'two',
    '3': 'three',
    '4': 'four',
    '5': 'five',
    '6': 'six',
    '7': 'seven',
    '8': 'eight',
    '9': 'nine',
    'T': 'dec',
    't': 'dec',
    'E': 'el',
    'e': 'el'
  };

  powers = {
    0: '',
    1: 'doh',
    2: 'gro',
    3: 'mo',
    4: 'doh',
    5: 'gro',
    6: 'bo',
    7: 'doh',
    8: 'gro',
    9: 'tro',
    10: 'doh',
    11: 'gro',
    12: 'quadro',
    13: 'doh',
    14: 'gro',
    15: 'quindo',
    16: 'doh',
    17: 'gro',
    18: 'sexdo',
    19: 'doh',
    20: 'gro',
    21: 'sepdo',
    22: 'doh',
    23: 'gro',
    24: 'ocdo',
    25: 'doh',
    26: 'gro',
    27: 'nondo'
  };

}).call(this);
